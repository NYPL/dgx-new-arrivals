@mixin visuallyHidden {
  position: absolute;
  left: -10000px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

@mixin displayVisuallyHidden {
  position: relative;
  left: 0;
  height: auto;
  width: 100%;
}

/* CLEARFIX EXTEND MIXIN
 * ---------------------
 * Usage: @extend %clearfix;
 * Desc: Provides IE6 and up support
 * to clear floated elements.
*/
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/* --- Media Query Generator ---
 * Reusable mixin used to generate
 * variations of media query properties.
 */
@mixin generate-mq($args...) {
  $media-type: 'only screen';
  $media-type-key: 'media-type';
  $args: keywords($args);
  $expr: '';

  @if map-has-key($args, $media-type-key) {
    $media-type: map-get($args, $media-type-key);
    $args: map-remove($args, $media-type-key);
  }

  @each $key, $value in $args {
    @if $value {
      $expr: "#{$expr} and (#{$key}: #{$value})";
    }
  }

  @media #{$media-type} #{$expr} {
    @content;
  }
}

/* min-and-max-screen($min, $max, $orientation) 
 * $min - required
 * $max - required
 * $orientation - optional
 * Ex: @include min-and-max-screen(768px, 1024px, landscape) { ... }
 */
@mixin min-and-max-screen($min, $max, $orientation: false) {
  @include generate-mq($min-width: $min, $max-width: $max, $orientation: $orientation) {
    @content;
  }
}

/* max-screen($max, $orientation) 
 * $max - required
 * $orientation - optional
 * Ex #1: @include max-screen(768px, landscape) { ... }
 * Ex #2: @include max-screen(768px) { ... }
 */
@mixin max-screen($max, $orientation: false) {
  @include generate-mq($max-width: $max, $orientation: $orientation) {
    @content;
  }
}

/* min-screen($min, $orientation) 
 * $min - required
 * $orientation - optional
 * Ex #1: @include min-screen(768px, landscape) { ... }
 * Ex #2: @include min-screen(768px) { ... }
 */
@mixin min-screen($min, $orientation: false) {
  @include generate-mq($min-width: $min, $orientation: $orientation) {
    @content;
  }
}

/* FONT FACE MIXIN
 * ---------------
 * Usage: @include font-face('Kievit-Regular', 'http://...');
 * Desc: Do not include the font file extension, this mixin
 * will generate the proper extensions.
*/ 
@mixin font-face($font-family, $file-path) {
  @font-face {
    font-family: $font-family;
    src: url('#{$file-path}.eot');
    src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
         url('#{$file-path}.woff') format('woff'),
         url('#{$file-path}.ttf') format('truetype');
  }
}

/* BORDER RADIUS MIXIN
 * -------------------
 * Usage: @include border-radius(5px);
 * Desc: Creates a border radius
*/ 
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
}

/* OPACITY MIXIN
 * ---------------
 * Usage: @include opacity(0.8);
 * Desc: Supports cross-browser Opacity rules
*/
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

/* UP ARROW MIXIN
 * ---------------
 * Usage: @include up-arrow(#EEE);
 * Desc: Creates a CSS3 arrow using pseudo :before,:after
 * Params: @color - HEX,RGB color of arrow
 *         @left - Distance from the left of the parent wrapper
 *         @bottom-or-top - String representation of either distance from the TOP or BOTTOM
 *         @distance - Distance from either TOP or BOTTOM
 *         @border-width - pixel width of arrow
*/
@mixin up-arrow($color, $left: 25%, $bottom-or-top: 'top', $distance: 0px, $border-width: 10px) {
  &:before, &:after {
    content: ' ';
    height: 0;
    position: absolute;
    width: 0;
    border-style: solid;
    border-width: $border-width;
    border-top-color: transparent;
    border-left-color: transparent;
    border-right-color: transparent;
    border-bottom-color: $color;    
    left: $left;

    @if ($bottom-or-top == 'top') {
      top: $distance;
    } @else {
      bottom: $distance;
    }
  }
  /* top-stacked, smaller arrow */
  &:before {
    z-index: 2;
  }
  /* arrow which acts as a background shadow */
  &:after {
    z-index: 1;
  }
}

/* CLEARFIX EXTEND MIXIN
 * ---------------------
 * Usage: @extend %clearfix;
 * Desc: Provides IE6 and up support
 * to clear floated elements.
*/
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/* VALUE CALCULATION MIXIN
 * ---------------------
 * Usage: Makes the properties of an element
 * can be defined by both percentage
 * and pixels.
*/

@mixin calculation($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: -moz-calc(#{$expression});
  #{$property}: calc(#{$expression});
}
